" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif



set encoding=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
 
set langmenu=zh_CN.UTF-8

syntax enable 
syntax on
 
colorscheme default
 
set selection=exclusive
set selectmode=mouse,key
 
 
set nocompatible
 
set softtabstop=4
set shiftwidth=4
set autoindent
set cindent
if &term=="xterm"
    set t_Co=4
    set t_Sb=^[[4%dm
    set t_Sf=^[[3%dm
endif
 
filetype on


set shell=bash
set ffs=unix,dos,mac
set number

set nobackup
set noswapfile
"搜索忽略大小写
"set ignorecase
"set linespace=0
"" 增强模式中的命令行自动完成操作
set wildmenu


set cul "高亮光标所在行
set cuc
set shortmess=atI " 启动的时候不显示那个援助乌干达儿童的提示
set go= " 不要图形按钮
"color desert " 设置背景主题
"color ron " 设置背景主题
""color torte " 设置背景主题
"set guifont=Courier_New:h10:cANSI " 设置字体
""autocmd InsertLeave * se nocul " 用浅色高亮当前行
autocmd InsertEnter * se cul " 用浅色高亮当前行
set ruler " 显示标尺
set showcmd " 输入的命令显示出来，看的清楚些
"set whichwrap+=<,>,h,l " 允许backspace和光标键跨越行边界(不建议)
set scrolloff=3 " 光标移动到buffer的顶部和底部时保持3行距离
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")} "状态行显示的内容
set laststatus=2 " 启动显示状态行(1),总是显示状态行(2)
""set foldenable " 允许折叠
""set foldmethod=manual " 手动折叠 

set hlsearch

set helplang=cn
" 总是显示状态行
set cmdheight=2


set showmatch
set matchtime=1
set completeopt=longest,menu
set termencoding=utf-8
set fileencodings=utf8,ucs-bom,gbk,chinese,cp936,gb2312,gb18030

set paste


let Tlist_Ctags_Cmd="/usr/bin/ctags"
"let Tlist_Auto_Open=1


nmap ,w :w<CR>
nmap ,c :close<CR>
nmap ,o :only<CR>
nmap ,q :qa<CR>
nmap ,n :tabnew 
nmap ,e :e ~/.vimrc<CR>
nmap ,t :Tlist<CR>
nmap ,z zfv{

set ts=4
set expandtab
set paste


set foldmethod=indent "set default foldmethod
"set foldmethod=manual "set default foldmethod



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头
autocmd BufNewFile *.cpp,*.cc,*.[ch],*.hpp,*.sh,*.rb,*.java,*.py exec ":call SetTitle()"
""定义函数SetTitle，自动插入文件头
func SetTitle()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1,"\#!/usr/bin/env bash")
        call append(line("."),   "########################################################################")
        call append(line(".")+1, "#    File Name: ".expand("%"))
        call append(line(".")+2, "# ")
        call append(line(".")+3, "#       Author: 艾维")
        call append(line(".")+4, "#         Mail: aceway@qq.com")
        call append(line(".")+5, "# Created Time: ".strftime("%c"))
        call append(line(".")+6, "#  Description: ...")
        call append(line(".")+7, "# ")
        call append(line(".")+8, "########################################################################")
        call append(line(".")+9, "")
        call append(line(".")+10, "")
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# -*- coding=utf-8 -*-")
        call append(line(".")+1, "########################################################################")
        call append(line(".")+2, "#    File Name: ".expand("%"))
        call append(line(".")+3, "# ")
        call append(line(".")+4, "#       Author: 艾维")
        call append(line(".")+5, "#         Mail: aceway@qq.com")
        call append(line(".")+6, "# Created Time: ".strftime("%c"))
        call append(line(".")+7, "#  Description: ...")
        call append(line(".")+8, "# ")
        call append(line(".")+9, "########################################################################")
        call append(line(".")+10, "")
        call append(line(".")+11, "")
        call append(line(".")+12, "")
        call append(line(".")+13, "")
        call append(line(".")+14, "")
        call append(line(".")+15, "")
        call append(line(".")+16, "if __name__ == '__main__':")
        call append(line(".")+17, "\tpass")
    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."),"# encoding: utf-8")
        call append(line(".")+1, "")
    else
        call setline(1, "/*************************************************************************")
        call append(line("."), " * File Name: ".expand("%"))
        call append(line(".")+1, " * ")
        call append(line(".")+2, " *       Author: 艾维")
        call append(line(".")+3, " *         Mail: aceway@qq.com")
        call append(line(".")+4, " * Created Time: ".strftime("%c"))
        call append(line(".")+5, " *  Description: ...")
        call append(line(".")+6, " * ")
        call append(line(".")+7, " ************************************************************************")
        call append(line(".")+8, "*/")
        call append(line(".")+9, "")
    endif
    if expand("%:e") == 'cpp'
        call append(line(".")+10, "#include<iostream>")
        call append(line(".")+11, "using namespace std;")
        call append(line(".")+12, "")
    elseif expand("%:e") == 'cc'
        call append(line(".")+10, "#include<iostream>")
        call append(line(".")+11, "using namespace std;")
        call append(line(".")+12, "")
    endif
    if &filetype == 'c'
        call append(line(".")+10, "#include<stdio.h>")
        call append(line(".")+11, "")
    endif
    if expand("%:e") == 'h'
        call append(line(".")+10, "#ifndef __".toupper(expand("%:r"))."__H")
        call append(line(".")+11, "#define __".toupper(expand("%:r"))."__H")
        call append(line(".")+12, "#endif")
    elseif expand("%:e") == 'hpp'
        call append(line(".")+10, "#ifndef __".toupper(expand("%:r"))."__H")
        call append(line(".")+11, "#define __".toupper(expand("%:r"))."__H")
        call append(line(".")+12, "#endif")
    endif
    if &filetype == 'java'
        call append(line(".")+10,"public class ".expand("%:r"))
        call append(line(".")+11,"")
    endif
    "新建文件后，自动定位到文件末尾
endfunc
autocmd BufNewFile * normal G


colorscheme default
